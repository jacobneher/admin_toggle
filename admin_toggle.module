<?php

/**
 * Implements hook_permission().
 */
function admin_toggle_permission() {
  return array(
    'use admin toggle' => array(
      'title' => t('Use admin toggle'),
      'description' => t('TODO'),
    ),
    'administer admin toggle' => array(
      'title' => t('Administer admin toggle'),
      'description' => t('TODO'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function admin_toggle_init() {
  // Let's make sure the user has permission AND we are not on an unnecessary page
  if (user_access('use admin toggle')) {
    if (arg(0) == 'admin') {
      return;
    }
    // If we are on a node edit or creation page...
    if (arg(0) == 'node' && (arg(2) == 'edit' || arg(1) == 'add')) {
      return;
    }

    /***  SPECIFIC MODULES  ***/
    // Handle pages if webform module is enabled
    if (module_exists('webform')) {
      if (arg(0) == 'node' && (arg(2) == 'webform' || arg(2) == 'webform-results')) {
        return;
      }
    }
    
    // Handles pages if panels module is enabled
    if (module_exists('panels')) {
      if (arg(0) == 'node' && ((arg(2) == 'panel_content') || arg(2) == 'panel_layout')) {
        return;
      }
    }
    
    drupal_add_js(drupal_get_path('module', 'admin_toggle') . '/js/admin_toggle.js');
    drupal_add_css(drupal_get_path('module', 'admin_toggle') . '/css/admin_toggle.css');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function admin_toggle_preprocess_html(&$vars) {
  if (variable_get('admin_toggle_show_show_messages_toggle', 1)) {
    $vars['classes_array'][] = 'admin-toggle-messages';
  }
  
  $vars['classes_array'][] = 'admin-toggle-tabs-' . variable_get('admin_toggle_show_admin_tabs', 'yes');
}

/**
 * Implements hook_preprocess_HOOK().
 * 
 * Override or insert variables into the block templates.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 */
function admin_toggle_preprocess_block(&$vars) {
  $vars['edit_links_array'] = array();
  if (user_access('administer blocks')) {
    include_once drupal_get_path('module', 'admin_toggle') . '/includes/template.block-editing.inc';
    admin_toggle_preprocess_block_editing($vars, $hook);
    $vars['classes_array'][] = 'with-block-editing';
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function admin_toggle_form_system_theme_settings_alter(&$form, &$form_state) {
  // We only want to show these options on the Global settings page
  if (!arg(3)) {
    $form['admin_toggle'] = array(
      '#type' => 'fieldset',
      '#title' => t('Admin Toggle'),
      '#description' => t('Some intro text should probably go here!'),
      'general_settings' => array(
        '#type' => 'fieldset',
        '#collapsible' => 1,
        '#collapsed' => 1,
        '#title' => t('General settings'),
        'admin_toggle_show_messages_toggle' => array(
          '#type' => 'checkbox',
          '#title' => t('Show messages toggle'),
          '#description' => t('If checked, a tab will be added to the side of the screen that will allow you to toggle the Drupal messages off/on with javascript to help with theme design/development.'),
          '#default_value' => variable_get('admin_toggle_show_messages_toggle', 1),
        ),
        'admin_toggle_show_admin_tabs' => array(
          '#type' => 'select',
          '#title' => t('Show admin tabs toggle'),
          '#description' => t('<strong>No:</strong> There will not be a tab to toggle the visibility of the admin tabs off/on.<br>
                               <strong>Yes:</strong> A tab will display on the side of the page to toggle the admin tabs off/on.<br>
                               <strong>Hover:</strong> Admin tabs will only display when the main content area is hovered over.'),
          '#options' => array(
            'no' => t('No'),
            'yes' => t('Yes'),
            'hover' => t('Hover'),
          ),
          '#default_value' => variable_get('admin_toggle_show_admin_tabs', 'yes'),
        ),
      ),
      'text_settings' => array(
        '#type' => 'fieldset',
        '#title' => t('Text settings'),
        '#collapsible' => 1,
        '#collapsed' => 1,
        'admin_toggle_admin_text_settings' => array(
          '#type' => 'textarea',
          '#title' => t('Text for administrative links'),
          '#description' => t('key|value. One per line.'),
          '#default_value' => variable_get('admin_toggle_admin_text_settings', ''),
        ),
      ),
    );
    
    $form['#submit'][] = 'admin_toggle_system_theme_settings_submit';
  }
}


/**
 * Submission handler for admin_toggle_form_system_theme_settings_alter().
 */
function admin_toggle_system_theme_settings_submit(&$form, &$form_state) {
  foreach ($form_state['values'] as $key => $value) {
    if (strpos($key, 'admin_toggle_') === 0) {
      variable_set($key, $value);
    }
  }
}


/**
 * Implements hook_page_build().
 */
function admin_toggle_page_build(&$page) {
  if (variable_get('admin_toggle_show_messages_toggle', 1)) {
    $page['page_bottom']['admin_toggle_messages'] = array(
      '#markup' => '<a href="#" class="admin-toggle-messages active"></a>',
    );
  }
  if (variable_get('admin_toggle_show_admin_tabs', 'yes') == 'yes') {
    $page['page_bottom']['admin_toggle_tabs'] = array(
      '#markup' => '<a href="#" class="admin-toggle-admin-tabs active"></a>',
    );
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function admin_toggle_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($data['tabs'][0]) && variable_get('admin_toggle_show_admin_tabs', 'yes') == 'hover') {
    $admin_text_settings = variable_get('admin_toggle_admin_text_settings', '');
    $raw_titles = explode("\r\n", $admin_text_settings);
    $titles = array();
    foreach ($raw_titles as $content) {
      $title_parts = explode('|', $content);
      $titles[strtolower($title_parts[0])] = $title_parts[1];
    }
    for ($i = 0; $i < $data['tabs'][0]['count']; $i++) {
      $link_title = strtolower($data['tabs'][0]['output'][$i]['#link']['title']);
      $data['tabs'][0]['output'][$i]['#link']['localized_options'] = array(
        'attributes' => array(
          'id' => $link_title . '-local-task',
          'title' => $titles[$link_title],
          'alt' => $titles[$link_title],
        ),
      );
    }
  }
}